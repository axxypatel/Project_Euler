# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
'''
1: 1
3: 1,3
6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
'''
# We can see that 28 is the first triangle number to have over five divisors.What is the value of the first triangle number to have over five hundred divisors?
# 73920 73920000
# This function is used to calculate the number of factors based on mathematical expression which says that number of divisors of any natural number is equal to multiplication of (ei + 1) where e is power of prime factor and i is prime factor


def cal_factors(total_sum1):
    n = total_sum1
    i = 2
    p = 1

    if total_sum1 == 1:
        return 1
    while i*i <= n:
        c = 1
        while n % i == 0:
            n /= i
            c += 1
        i += 1
        p *= c
    if n == total_sum1 or n > 1:
        p *= 2

    return p


numb = 1
total_sum = 0
factors = 500
while True:
    total_sum = total_sum + numb
    # print(sum)
    tot_fact = cal_factors(total_sum)
    if tot_fact > factors:
        print("Number to have over", factors, "divisors is:", total_sum)
        break
    numb += 1
